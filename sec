#!/bin/sh
# secret store based on age(1), uses existing user's ssh keys for encryption
# loosely inspired by pash
# depends: age

SSH_KEY=${SSH_KEY:-${HOME}/.ssh/id_ed25519}
SSH_PUB=${SSH_PUB:-${HOME}/.ssh/id_ed25519.pub}
STORE=${XDG_CONFIG_HOME:-${HOME}/.config}/sec
PASSPHRASE=

usage() {
	cat <<EOF
usage: sec [-p] [get|set] [args]
where:
    -p                    encrypt with passphrase
    get <path>            get secret value
    set <path> <value>    set secret value
EOF
}

# 1 - char
is_yes() {
	case "$1" in [yY]) return 0; esac; return 1
}

# 1 - path
get_secret() {
	if [ "$PASSPHRASE" -eq 1 ]; then
		age --decrypt -o - "$1"
	else
		age --decrypt -i "${SSH_KEY}" -o - "$1"
	fi
}

# 1 - path
# 2 - value
set_secret() {
	[ -d "$(dirname "$1")" ] || mkdir -p "$(dirname "$1")"

	if [ -f "$1" ]; then
		echo "warning: will overwrite existing secret! continue? [y/N]"

		# get single-char response (stolen from pash)
		stty -icanon
		resp=$(dd ibs=1 count=1 2>/dev/null)
		stty icanon

		is_yes "$resp" || exit 0

		rm "$1"
	fi
	
	if [ "$PASSPHRASE" -eq 1 ]; then
		echo "$2" | age -p -o "$1"
	else
		echo "$2" | age -r "$(cat "${SSH_PUB}")" -o "$1"
	fi
}

# 1 - path
del_secret() {
	rm -i "$1"
}

main() {
	case "$1" in
		set) set_secret "${STORE}/${2}" "$3"
		     ;;
		get) [ -f "${STORE}/${2}" ] || { echo "secret does not exist."; exit 1; }
 		     get_secret "${STORE}/${2}"
		     ;;
		del) [ -f "${STORE}/${2}" ] || { echo "secret does not exist."; exit 1; }
		     del_secret "${STORE}/${2}"
		     ;;
		-p)
		     PASSPHRASE=1
		     shift
		     main "$@"
		     ;;
		*)   usage
		     exit 1
		     ;;
	esac
}

[ -d "$STORE" ] || mkdir -p "$STORE"
main "$@"
